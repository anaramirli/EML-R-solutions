if (strsplit(as.character(testData$speaker[[i]]), "\\.")[[1]][1]=="train") {
train_idx <-c (train_idx, i)
} else {
test_idx <-c (test_idx, i)
}
}
test_idx
train_idx
length(train_idx)
length(test_idx)
for (i in 1:length(testData$speaker)){ print(paste(strsplit(testData$speaker[[i]], "\\.")[[1]][1]))}
for (i in 1:length(testData$speaker)){ print(paste(strsplit(as.character(testData$speaker[[i]]), "\\.")[[1]][1]))}
df.train <- split(dataset, train_idx)
df.train <- split(testData, train_idx)
df.train
dim(df.train)
df.train <- split(testData, train_idx)
summary(df.train)
train_idx
testData(c(1,2,3))
testData.frame(c(1,2,3))
testData.frame(c(1,2,3),)
testData(c(1,2,3),)
testData[c(1,2,3), ]
testData[train_idx, ]
testData[c(train_idx), ]
testData[as.factor(train_idx), ]
testData[factor(train_idx), ]
testData[unlist(train_idx), ]
clc
clc
clear
clear()
clc()
install.packages("dplyr")
library(dplyr)
# load data
data <- read.csv("phoneme.csv")
install.packages("dplyr")
dim(data)
dim(data.train)
dim(data.train)
install.packages("dplyr")
library(dplyr)
# load data
data <- read.csv("phoneme.csv")
# SPLIT DATA
train_idx = list()
test_idx = list()
# get train/test indices
for (i in 1:length(data$speaker)){
# split string and get the label
label <- strsplit(as.character(data$speaker[[i]]), "\\.")[[1]][1]
if (label=="train") {
train_idx <-c (train_idx, i)
} else if (label=="test") {
test_idx <-c (test_idx, i)
}
}
# create subgroups based on train/test inices
data.train = testData[unlist(train_idx)]
data.test = testData[unlist(test_idx)]
data.train = testData[unlist(train_idx),]
data.test = testData[unlist(test_idx),]
dim(data)
dim(data.train)
dim(data.test)
df = subset(data$train, select = -c(row.names))
df = subset(data$train, select = -c("row.names"))
df = subset(data$train, select = -c(data$row.names))
df = subset(data.train, select = -c(data$row.names))
df
df = subset(data.train, select = -c(data.train$row.names))
df = subset(data.train, select = -c(data.train$row.names))
df
df = subset(data.train, select = -c(row.names))
df
df = subset(data.train, select = -c(row.names))
excluded_cols <- c(row.names, g, speaker)
train_features = subset(data.train, select = -excluded_cols)
excluded_cols <- c(row.names, g, speaker)
subset(data.train, select = -c("speaker"))
subset(data.train, select = -c(speaker))
subset(data.train, select = -c(speaker, g))
excluded_cols <- c(row.names, speaker, g)
excluded_cols <- c(speaker, g)
excluded_cols <- c(g)
subset(data.train, select = -c(row.names, speaker, g))
f <- paste(names(train_features)[1], "~", paste(names(train_features)[-1], collapse=" + "))
train_features = subset(data.train, select = -c(row.names, speaker, g))
test_features = subset(data.test, select = -c(row.names, speaker, g))
f <- paste(names(train_features)[1], "~", paste(names(train_features)[-1], collapse=" + "))
f
train_features = subset(data.train, select = -c(row.names, speaker))
test_features = subset(data.test, select = -c(row.names, speaker))
train_features = subset(data.train, select = -c(row.names, speaker))
test_features = subset(data.test, select = -c(row.names, speaker))
f <- paste(names(train_features)[-1], "~", paste(names(train_features)[1], collapse=" + "))
f
f <- paste(names(train_features)[1], "~", paste(names(train_features)[-1], collapse=" + "))
f
f <- paste(names(train_features)[-1], " + ", paste(names(train_features)[1], collapse="~"))
f
f <- paste(names(train_features)[-1], names(train_features)[1], "~", paste(names(train_features)[-2], collapse=" + "))
f
f <- paste(names(train_features)[1], "~", paste(names(train_features)[-1], collapse=" + "))
f <- paste(names(train_features)[1], "~", paste(names(train_features)[-1], collapse=" + "))
f
f <- paste(names(train_features)[1], paste(names(train_features)[-1], collapse=" + "))
f
f <- paste(names(train_features)[1], "+ " paste(names(train_features)[-1], collapse=" + "))
f <- paste(names(train_features)[1], "+ ", paste(names(train_features)[-2], collapse=" + "))
f
f <- paste("dwd", names(train_features)[1], "+ ", paste(names(train_features)[-2], collapse=" + "))
f
f <- paste(names(train_features)[-1], "~", names(train_features)[1], " + ", paste(names(train_features)[-2], collapse=" + "))
f
f <- paste(names(train_features)[-1], "~", names(train_features)[1], " + ", paste(names(train_features)[-2], collapse=" + "))
f
f <- paste("g ~", names(train_features)[1], " + ", paste(names(train_features)[-2], collapse=" + "))
f
head(test_features)
f <- paste(names(train_features)[1], " + ", paste(names(train_features)[-1], collapse=" + "))
f
f <- paste(names(train_features)[1], " + ", paste(names(train_features)[-2], collapse=" + "))
f
paste(names(train_features)[-2])
paste(names(train_features))
paste(names(train_features))[[-1]]
paste(names(train_features)[[1]])
paste(names(train_features)[[1:-1]])
paste(names(train_features)[[1:-1,]])
paste(names(train_features)[[-1]])
paste(names(train_features)[[1]])
paste(names(train_features)[[1:3]])
paste(names(train_features)[[1:3,]])
paste(names(train_features))
names(train_features)
names(train_features)[1:-1]
names(train_features)[[:-1]]
paste(1, 2)
d<-paste(1,2)
d
d<-paste(d, 1,2)
d
length(names(data.train))
train_features = subset(data.train, select = -c(row.names, speaker, g))
test_features = subset(data.test, select = -c(row.names, speaker, g))
f <- paste(names(train_features)[1], " + ", paste(names(train_features)[-1], collapse=" + "))
f
paste("g ~ ", f)
# remove row number, speaker, response columns from the features
train_features = subset(data.train, select = -c(row.names, speaker, g))
test_features = subset(data.test, select = -c(row.names, speaker, g))
# PART 2)
f <- paste(names(train_features)[1], " + ", paste(names(train_features)[-1], collapse=" + "))
lda.fit <- lda(as.formula(paste("g ~ ", f)), data = data.train)
install.packages("MASS")
library(MASS)
lda.fit <- lda(as.formula(paste("g ~ ", f)), data = data.train)
lda.fit
plot(lda.fit)
lda.fit.predict <- predict(lda.fit, newdata = data.train)
lda.train.pred <- predict(lda.fit, newdata = data.train)
lda.train.class=lda.train.pred$class
lda.train.class
data.train$g
table(lda.train.class, data.train)
table(lda.train.class, data.train$g)
mean(lda.train.class!=data.train$g)
paste(mean(lda.train.class!=data.train$g)*100, "%")
mean(lda.train.class!=data.train$g)
table(lda.train.class, data.train$g)
# predict test
lda.test.pred <- predict(lda.fit, newdata = data.test)
# get prediction labels
lda.test.class=lda.test.pred$class
# error
mean(lda.test.class!=data.test$g)
table(lda.class ,Direction .2005)
lda.fit
plot(lda.fit)
lda.fit
data.train[data.train$g==c("ao", "ae")]
data.train[data.train$g==c("ao")]
data.train[data.train$g==c(ao)]
data.train[data.train$g==c("ao")]
data.train[data.train$g=="ao"]
filter(data.train, g == "ao" | "aa")
filter(data.train, g == "ao" | g== "aa")
data.train.new = filter(data.train, g == "ao" | g== "aa")
data.test.new = filter(data.test, g == "ao" | g== "aa")
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.train.new)
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.train.new)
data.train.new = filter(data.train, g == "ao" | g== "aa")
data.test.new = filter(data.test, g == "ao" | g== "aa")
data.train.new
data.train.new
data.train.new = filter(data.train, g == "ao" | g== "aa")
data.test.new
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.train.new)
f
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.test.new)
data.train.new
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.frame(data.test.new))
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.frame(data.test.new))
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.frame(data.test.new))
data.train.new <-data.train[!(data.train$g=="ao" | data.train$g=="aa"),]
data.test.new <-data.test[!(data.test$g=="ao" | data.test$g=="aa"),]
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.frame(data.train.new))
data.train.new <-data.train[!(data.train$g=="ao" | data.train$g=="aa"),]
data.test.new <-data.test[!(data.test$g=="ao" | data.test$g=="aa"),]
del data.train.new
data.trainnew <-data.train[!(data.train$g=="ao" | data.train$g=="aa"),]
data.testnew <-data.test[!(data.test$g=="ao" | data.test$g=="aa"),]
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.trainnew)
data.train.new <-data.train[(data.train$g=="ao" | data.train$g=="aa"),]
data.test.new <-data.test[(data.test$g=="ao" | data.test$g=="aa"),]
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.train.new)
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.frame(data.train.new, drop=FALSE))
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.frame(data.train.new, drop=TRUE)
)
data.train.new <-subset(data.train, g=="ao" | data.train$g=="aa"]
ata.train.new <-subset(data.train, g=="ao" | g=="aa"]
data.train.new <-subset(data.train, g=="ao" | g=="aa")
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = ddata.train.new)
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.train.new)
data.train.new <-subset(data.train, g=="ao" | g=="aa")
data.test.new <-subset(data.train, g=="ao" | g=="aa")
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = data.train.new)
paste("g ~ ", f)
lda.fit.new <- lda(as.formula(paste("g ~ ", f)), data = ungroup(data.train.new))
install.packages("dplyr")
library(dplyr)
install.packages("MASS")
library(MASS)
# PART 1)
# load data
data <- read.csv("phoneme.csv")
# SPLIT DATA
train_idx = list()
test_idx = list()
for (i in 1:length(data$speaker)){
# split string and get the label
label <- strsplit(as.character(data$speaker[[i]]), "\\.")[[1]][1]
if (label=="train") {
train_idx <-c (train_idx, i)
} else if (label=="test") {
test_idx <-c (test_idx, i)
}
}
# create subgroups based on train/test inices
data.train = testData[unlist(train_idx),]
data.test = testData[unlist(test_idx),]
# create subgroups based on train/test inices
data.train = data[unlist(train_idx),]
data.test = data[unlist(test_idx),]
dim(data.train)
dim(data.test)
dim(data)
# remove row number, speaker, response columns from the features
train_features = subset(data.train, select = -c(row.names, speaker, g))
test_features = subset(data.test, select = -c(row.names, speaker, g))
# PART 2)
# create formula
f <- paste(names(train_features)[1], " + ", paste(names(train_features)[-1], collapse=" + "))
# fit
lda.fit <- lda(as.formula(paste("g ~ ", f)), data = data.train)
lda.fit
# TRAIN ERROR
# predict test
lda.train.pred <- predict(lda.fit, newdata = data.train)
# get prediction labels
lda.train.class=lda.train.pred$class
# error
mean(lda.train.class!=data.train$g)
# TEST ERROR
# predict test
lda.test.pred <- predict(lda.fit, newdata = data.test)
# get prediction labels
lda.test.class=lda.test.pred$class
# error
mean(lda.test.class!=data.test$g)
# print talble (confussion matrix)
# table(lda.train.class, data.train$g)
# PART 3)
library(MASS)
library(MASS)
df<-read.table("prostate.txt")
train<-filter(df, train == "TRUE")
test<-filter(df, train == "FALSE")
library(MASS)
library(RCurl) # for read.table()
df<-read.table("prostate.txt")
train<-filter(df, train == "TRUE")
test<-filter(df, train == "FALSE")
library(RCurl) #
install.packages("RCurl")
library(MASS)
library(RCurl) # for read.table()
df<-read.table("prostate.txt")
train<-filter(df, train == "TRUE")
test<-filter(df, train == "FALSE")
test
df<-read.table("prostate.txt")
cd
getwd()
currentwd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(currentwd)
setwd("E:/master_studies/ws20-21/eml/decel-joshua-ile-R/A3")
df<-read.table("prostate.txt")
train<-filter(df, train == "TRUE")
test<-filter(df, train == "FALSE")
df<-read.table("prostate.txt")
train<-filter(df, train == "TRUE")
df.head(10)
head(df)
train<-filter(df, train == "TRUE")
test<-filter(df, train == "FALSE")
train<-filter(df, train == "TRUE")
test<-filter(df, train == "FALSE")
train<-filter(df, df$train == "TRUE")
test<-filter(df, df$train == "FALSE")
df[1:]
df
df[1:,:]
df(1:, :)
df[,1]
df[1,]
df[,0]
df[,1]
df[,]
df
df[,1]
df.reset_index(drop=True, inplace=True)
df[1]
df[1]
df[1]
df[1]
clc
clear
d
df
Y.train <-filter(df$lpsa, df$train == "TRUE")
Y
Y.train
df.train[1]
df.train[,1]
df.train <-filter(df, df$train == "TRUE")
df.test <-filter(df, df$train == "FALSE")
df.train
df.train[,1]
df.train[,2]
df.train[0]
df.train[1]
df[1]
df[2]
df[1]
df.train[1]
df.train <-filter(df, df$train == "TRUE")
df.test <-filter(df, df$train == "FALSE")
train <-filter(df, df$train == "TRUE")
test <-filter(df, df$train == "FALSE")
df
train
df$train
train <-subset(df, df$train == "TRUE")
test <-subset(df, df$train == "FALSE")
train
train <-subset(df, train == "TRUE", select=-(train))
train
test[1]
test1=test[1]/10
test[1]=test[1]/10
test[1]
test[9]
test[8]
test[8]=test[8]/10
test[9]
test[8]
train.dim
train.size
size(train)
dim(train)
dim(train)[1]
dim(train)[2]
for (i in dim(train)[2]){
print(i)
}
for (i in 1:dim(train)[2]){
print(i)
}
for (i in 1:dim(train)[2]-1){
print(i)
}
colnames(train)
colnames(train[-1])
colnames(train[,-1])
colnames(train[,1])
colnames(train[1])
colnames(train[-2])
colnames(train[,-1])
colnames(train[,])
colnames(train[,])
colnames(train[-(lpsa)])
colnames(train[-(train$lpsa)])
colnames(train[-("lpsa")])
train[-c("lpsa")]
train[c("lpsa")]
train[, -c("lpsa")]
train[, train$lpsa]
train[, lpsa]
train[, "lpsa"]
train[, -"lpsa"]
for i in !colnames(train) %in% c("lpsa")]
for i in !colnames(train) %in% c("lpsa"){print(i)}
for (i in !colnames(train) %in% c("lpsa")){print(i)}
train[, "lpsa"]
train[, -"lpsa"]
train[, ("lpsa")]
train[, c("lpsa")]
train[, -c("lpsa")]
for (i in 1:dim(subset(train, select=-(lspa))){
print(i)
}
for (i in 1:dim(subset(train, select=-(lspa)))){
print(i)
}
for (i in 1:dim(subset(train, select=-(lpsa)))){
print(i)
}
for (i in 1:colnames(subset(train, select=-(lpsa)))){
print(i)
}
for (i in 1:colnames(subset(train, select=-(lpsa), drop=True))){
print(i)
}
for (i in 1:colnames(subset(train, select=-(lpsa), drop=TRUE))){
print(i)
}
subset(train, select=-(lpsa), drop=TRUE))
subset(train, select=-(lpsa), drop=TRUE)
colnames(subset(train, select=-(lpsa), drop=TRUE))
for (i in colnames(subset(train, select=-(lpsa))){
print(i)
}
for (i in colnames(subset(train, select=-(lpsa), drop=TRUE))){
print(i)
}
mean(train["svi"])
train["svi"]
train
summary(train)
train <-subset(df, train == "TRUE", select=-(train), drop=TRUE)
test <-subset(df, train == "FALSE", select=-(train), drop=TRUE)
for (i in colnames(subset(train, select=-(lpsa), drop=TRUE))){
train[i]
}
mean(train["svi"])
train[] <- lapply(train, function(x) if(is.factor(x)) factor(x) else x)
mean(train["svi"])
train <- lapply(train, function(x) if(is.factor(x)) factor(x) else x)
mean(train["svi"])
mean(as.numeric(as.character(train["svi"])), na.rm=TRUE)
mean(as.numeric(train["svi"]))
train["svi"]
type(train["svi"])
as.numeric(train["svi"])
as.numeric(unlist(train["svi"]))
#
for (col_name in colnames(subset(train, select=-(lpsa), drop=TRUE))){
as.numeric(unlist(train[col_name]))
}
for (i in colnames(subset(train, select=-(lpsa), drop=TRUE))){
train[i]
}
for (i in colnames(subset(train, select=-(lpsa), drop=TRUE))){
print(i)
}
train <-subset(df, train == "TRUE", select=-(train))
test <-subset(df, train == "FALSE", select=-(train))
#
for (i in colnames(subset(train, select=-(lpsa), drop=TRUE))){
print(i)
}
train <-subset(df, train == "TRUE", select=-(train))
test <-subset(df, train == "FALSE", select=-(train))
#
for (i in colnames(subset(train, select=-(lpsa)))){
print(i)
}
for (col_name in colnames(subset(train, select=-(lpsa)))){
as.numeric(unlist(train[col_name]))
}
train_mean = mean(as.numeric(unlist(train[col_name])))
train_var  = var(as.numeric(unlist(train[col_name])))
for (col_name in colnames(subset(train, select=-(lpsa)))){
# get the mean and var of train features
mean = mean(as.numeric(unlist(train[col_name])))
var  = var(as.numeric(unlist(train[col_name])))
train[col_name] = (as.numeric(unlist(train[col_name]))-mean)/var
test[col_name] = (as.numeric(unlist(test[col_name]))-mean)/var
}
train
# Normalize each input feature to a mean of 0 and a variance of 1
for (col_name in colnames(subset(train, select=-(lpsa)))){
# get the mean and var of train features
mean = mean(as.numeric(unlist(train[col_name])))
sd  = sd(as.numeric(unlist(train[col_name])))
train[col_name] = (as.numeric(unlist(train[col_name]))-mean)/sd
test[col_name] = (as.numeric(unlist(test[col_name]))-mean)/sd
}
